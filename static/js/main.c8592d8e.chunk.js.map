{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","i","nRows","row","j","nCols","push","Math","random","chanceLightStartsOn","coord","nrows","ncols","split","map","Number","flipCell","every","cell","setState","tableBoard","flipCellsAround","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8592d8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.2,\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < this.props.nRows; i++) {\n      const row = [];\n      for (let j = 0; j < this.props.nCols; j++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    const nrows = this.props.nRows;\n    const ncols = this.props.nCols;\n    let board = this.state.board;\n    let [i, j] = coord.split('-').map(Number);\n    function flipCell(i, j) {\n      // if this coord is actually on board, flip it\n      if (i >= 0 && i < nrows && j >= 0 && j < ncols) {\n        board[i][j] = !board[i][j];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(i, j);\n    flipCell(i, j + 1);\n    flipCell(i, j - 1);\n    flipCell(i + 1, j);\n    flipCell(i - 1, j);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    let hasWon = board.every((row) => row.every((cell) => cell === false));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    if (this.state.hasWon) {\n      return (\n        <div className=\"Board-title\">\n          <div className=\"winner\">\n            <span className=\"neon-orange\">YOU</span>\n            <span className=\"neon-blue\">WIN!!!</span>\n          </div>\n        </div>\n      );\n    }\n    let tableBoard = [];\n    for (let i = 0; i < this.props.nRows; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.nCols; j++) {\n        const coord = `${i}-${j}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[i][j]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tableBoard.push(<tr key={i}>{row}</tr>);\n    }\n    // TODO\n    // make table board\n    // TODO\n    return (\n      <div>\n        <div className=\"Board-title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}